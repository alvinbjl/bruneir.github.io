{
  "hash": "16f2e05b630e2bbafa97519508ca8445",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Visualising the rivers of Brunei'\ndate: '2025-03-12'\nauthor: Haziq Jamil\nlightbox: true\n# categories: \n#  - Random\n---\n\nIt is the 11th day of Ramadhan--a time filled with both reflection and quiet productivity.\nDuring this blessed month I have the opportunity to rise and a little earlier than usual.\nOnce my morning tasks were complete, I settled in front of my computer, ready to dive into work.\n\nA particularly intriguing message awaited my attention.\n[Feezul](https://hafeezulrzq.github.io) had sent over a an exquisitely detailed image of the rivers of Brunei. \nThe illustration was precise enough that it allowed one to distinguish the subtle curves of the estuaries from the meandering tributaries. \n(Note to self: I have not used these terms, estuaries and tributaries, in years!)\nFor some inexplicable reason, the image whisked me back to my school days--a time when I and other schoolchildren eagerly memorised the names of Brunei’s four major rivers (a breeze, given that they’re named after their respective districts!). \nYet, as the image so delightfully reveals, there’s a far richer tapestry than just these four waterways.\n\nThe accompanying [LinkedIn post](https://www.linkedin.com/posts/nur-fatin-nazihah-j-5aa5b322b_qgis-activity-7303345423539220480-ka87/?utm_source=share&utm_medium=member_desktop&rcm=ACoAADQkdt4Brxe1zv7dabM9NmKh8ki6Rq_Bhpk) not only credits the data source but also offers an easy tutorial using QGIS—so straightforward that the entire process can be wrapped up in just 10-15 minutes.\n\nThen a curious thought struck: how long would it take to recreate this visual masterpiece using R?\nWithout a moment's hesitation, I quipped (quietly, since my daughter was still asleep)\n\"Hey Siri, set a timer for 15 minutes\".\nI fired up RStudio and started coding.\n\nThe first step was to load the necessary libraries.\nFor this, I am relying on the `{sf}` package to handle the spatial data and `{ggplot2}` for the plotting.\nThe `{bruneimap}` package also comes in handy here, which contains polygon objects of Brunei.\nCheck out the package [here](https://github.com/bruneiverse/bruneimap).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # contains ggplot2 and other stuff for data wrangling\nlibrary(sf)\nlibrary(bruneimap)\npostdir <- \"posts/brunei-rivers/\"\nhere::i_am(paste0(postdir, \"index.qmd\"))  # Working directory\n```\n:::\n\nNext, we need to get the data.\nThanks to the LinkedIn post, I had a direct [link](https://www.hydrosheds.org/products/hydrorivers#downloads) to the data source provided by HydroSHEDS.\nAs the website says, the HydroRIVERS v1.0 data set is freely available for scientific, educational, and commercial use.\nA quick look at the technical documentation confirmed that the Australasia data set in Shapefile format was exactly what I needed.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download the data (46.4 MB)\nif (!file.exists(here::here(postdir, \"HydroRIVERS_v10_au_shp/HydroRIVERS_v10_au.shp\"))) {\n  download.file(\n    url = \"https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_au_shp.zip\",\n    destfile = here::here(postdir, \"HydroRIVERS_v10_au_shp.zip\")\n  )\n  unzip(\n    zipfile = here::here(postdir, \"HydroRIVERS_v10_au_shp.zip\"), \n    exdir = here::here(postdir)\n  )\n}\n```\n:::\n\nLoading libraries to data acquisition took just three minutes. \nSo far, so good.\nNext, it's time to load the data into R.\n\n::: {.cell}\n\n```{.r .cell-code}\nrivers_sf <- sf::read_sf(here::here(postdir, \"/HydroRIVERS_v10_au_shp/HydroRIVERS_v10_au.shp\"))\nglimpse(rivers_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 836,472\nColumns: 15\n$ HYRIV_ID   <int> 50000001, 50000002, 50000003, 50000004, 50000005, 50000006,…\n$ NEXT_DOWN  <int> 50000003, 50000003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500000…\n$ MAIN_RIV   <int> 50000003, 50000003, 50000003, 50000004, 50000005, 50000006,…\n$ LENGTH_KM  <dbl> 1.59, 5.04, 1.07, 1.28, 2.68, 1.33, 1.76, 1.09, 0.69, 0.69,…\n$ DIST_DN_KM <dbl> 1.5, 1.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,…\n$ DIST_UP_KM <dbl> 3.0, 7.9, 9.0, 3.5, 4.5, 2.9, 3.6, 2.4, 2.0, 2.5, 2.8, 3.2,…\n$ CATCH_SKM  <dbl> 3.61, 16.66, 2.21, 4.01, 7.63, 3.41, 4.63, 2.62, 3.22, 3.42…\n$ UPLAND_SKM <dbl> 3.6, 16.7, 22.1, 3.6, 7.4, 3.2, 4.0, 2.4, 2.8, 3.2, 2.2, 3.…\n$ ENDORHEIC  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ DIS_AV_CMS <dbl> 0.153, 0.678, 0.895, 0.153, 0.312, 0.136, 0.198, 0.120, 0.1…\n$ ORD_STRA   <int> 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2,…\n$ ORD_CLAS   <int> 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,…\n$ ORD_FLOW   <int> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6,…\n$ HYBAS_L12  <dbl> 5120031120, 5120031120, 5120031120, 5120031120, 5120031120,…\n$ geometry   <LINESTRING [°]> LINESTRING (121.8375 20.75,..., LINESTRING (121.…\n```\n\n\n:::\n:::\n\nAs per the technical document, this dataset should contain `LINESTRING` objects representing rivers across the vast Australasia region.\nIndeed, there are 836472 such features (rivers).\nSo we'll need to filter for the rivers in Brunei.\nMy strategy here is to use `st_intersection()` from the `{sf}` package, but from experience this takes a bit of time if the data set is huge (which, in this case, it is!).\nSo before doing that, I'll crop out the rivers that are contained within Brunei's bounding box, making use of the `{bruneimap}` package.\nHere’s how I pieced it together:\n\n::: {.cell}\n\n```{.r .cell-code}\nbbox <- st_bbox(bruneimap::brn_sf)\nbnrivers_sf <-\n  st_crop(rivers_sf, bbox) |>\n  st_intersection(bruneimap::brn_sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n:::\n\nA quick check confirmed I was indeed on the right track:\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(bnrivers_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,100\nColumns: 16\n$ HYRIV_ID   <int> 50049203, 50049379, 50049412, 50049413, 50049449, 50049450,…\n$ NEXT_DOWN  <int> 0, 0, 50049379, 50049412, 50049412, 50049412, 50049379, 0, …\n$ MAIN_RIV   <int> 50049203, 50049379, 50049379, 50049379, 50049379, 50049379,…\n$ LENGTH_KM  <dbl> 1.62, 1.12, 1.12, 0.69, 0.46, 1.35, 1.96, 2.56, 1.35, 1.61,…\n$ DIST_DN_KM <dbl> 0.0, 0.0, 1.4, 2.4, 2.4, 2.6, 1.4, 0.0, 3.0, 5.0, 3.4, 2.8,…\n$ DIST_UP_KM <dbl> 3.2, 10.3, 5.7, 2.7, 4.7, 2.5, 9.2, 4.0, 2.3, 3.3, 4.9, 4.3…\n$ CATCH_SKM  <dbl> 2.99, 1.28, 1.28, 2.57, 0.64, 2.78, 3.21, 9.62, 3.21, 4.28,…\n$ UPLAND_SKM <dbl> 2.8, 47.7, 13.7, 2.6, 7.1, 2.8, 33.1, 9.4, 3.2, 4.3, 11.1, …\n$ ENDORHEIC  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ DIS_AV_CMS <dbl> 0.190, 3.263, 0.939, 0.175, 0.485, 0.190, 2.266, 0.646, 0.2…\n$ ORD_STRA   <int> 1, 3, 2, 1, 2, 1, 3, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1,…\n$ ORD_CLAS   <int> 1, 1, 2, 4, 2, 3, 1, 1, 3, 2, 2, 2, 3, 1, 2, 1, 2, 1, 2, 5,…\n$ ORD_FLOW   <int> 7, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7,…\n$ HYBAS_L12  <dbl> 5120018310, 5120018310, 5120018310, 5120018310, 5120018310,…\n$ name       <chr> \"Mainland\", \"Mainland\", \"Mainland\", \"Mainland\", \"Mainland\",…\n$ geometry   <LINESTRING [°]> LINESTRING (115.0521 5.0291..., LINESTRING (114.…\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(bnrivers_sf) + geom_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/brunei-river-1-1.png){width=672}\n:::\n:::\n \nAll I have to do now is prettify the plot.\nFrom the original image, I observed that the major rivers appeared ever so slightly chunkier than the minor ones, and there was a playful interaction of transparency. I needed to decide which variable in the dataset would best map to the `linewidth` and `alpha` aesthetics in my `ggplot()` call.\nMy first thought was to use the `ORD_CLAS` variable, which is a measure of river order following the Strahler system. \nMy initial attempt at prettifying the image yielded the following:\n\n::: {.cell}\n\n```{.r .cell-code}\nbnrivers_sf |>\n  filter(ORD_CLAS %in% 1:3) |>  # Only the first three orders\n  ggplot() +\n  geom_sf(aes(alpha = ORD_CLAS, linewidth = ORD_CLAS)) +\n  scale_alpha_continuous(range = c(1, 0.5)) +\n  scale_linewidth_continuous(range = c(0.8, 0.5)) +\n  theme_void() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/brunei-river-2-1.png){width=672}\n:::\n:::\n\nThe result looked… adequate, but not quite striking. \nTwelve minutes had already flown by. \nI could have stopped there, but I wanted to elevate the visualization further. \nAfter all, people count on me to present a compelling use case for R! (Do they, though?)\nThe thing is, I felt that I needed to really study the variables in the data set to figure out which one would be suitable to use for the aesthetics.\nThat could take a while.\nI know almost nothing about rivers, so I decided to ask good 'ol ChatGPT for guidance.\n\nI prompted ChatGPT to suggest which of the variables in the data set would be suitable for mapping to the aesthetics, even giving it the codebook so it can help me out better.\nAnd this is what it come back with:\n\n::: {.cell}\n\n```{.r .cell-code}\nbnrivers_sf |>\n  mutate(log_dis = log(DIS_AV_CMS + 1)) |>\n  filter(DIS_AV_CMS > 0.1) |>\n  ggplot() +\n  geom_sf(aes(linewidth = log_dis, alpha = log_dis), color = \"white\") +\n  scale_linewidth_continuous(range = c(0.3, 1.1)) +\n  scale_alpha_continuous(range = c(0.2, 1)) +\n  labs(\n    title = \" The Rivers of Brunei Darussalam\",\n    subtitle = \" Major rivers highlighted by average discharge\",\n    caption = \"Data Source: HydroSHEDS \\nCreated by: Haziq J \"\n  ) +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    panel.background = element_rect(fill = \"#0e1111\", color = \"#0e1111\"),\n    plot.background  = element_rect(fill = \"#0e1111\", color = \"#0e1111\"),\n    plot.title       = element_text(color = \"#FBFAF5\", size = 20, face = \"bold\"),\n    plot.subtitle    = element_text(color = \"#FBFAF5\", size = 14),\n    plot.caption     = element_text(color = \"#FBFAF5\", size = 10)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/brunei-river-3-1.png){width=864}\n:::\n:::\n\nWith a bit of fine-tuning on my part, the final visualisation bore an uncanny resemblance to the polished outputs of QGIS. \nJust as I was wrapping up, the timer went off.\nIt was time to head to campus for a teaching day.\nWhat a fun way to start the day!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}